@model IEnumerable<SysCafeteriasweetcoffee.Models.Producto>

@{
    ViewData["Title"] = "Index";

}

<h1>Producto</h1>

<p>
    <div>
        <a asp-action="Create">
            <button class="view-all-btn">Create New</button>
        </a>
    </div>

</p>

<h1>Productos</h1>
<!-- Formulario de Búsqueda -->
<form method="get">
    <!-- Barra de búsqueda por nombre de producto -->
    <input type="text" name="searchString" value="@ViewData["searchString"]" placeholder="Buscar producto..." />
    
     <select name="idCategoria">
        <option value="">Seleccionar Categoría</option>
        @foreach (var categoria in ViewData["Categorias"] as SelectList)
        {
            var selected = categoria.Value == ViewData["idCategoria"]?.ToString() ? "selected" : "";
            <option value="@categoria.Value" selected="@selected">@categoria.Text</option>
        }

    </select>
    
    <button type="submit">Buscar</button>
</form>
<div class="row" id="product-container">
    @foreach (var item in Model)

    {
        <div class="col-md-3 mb-3">
            <div class="dessert-item card">
                <img src="@item.img" class="card-img-top" alt="Imagen del producto" style="height: 200px; object-fit: cover;">
                <div class="card-body">
                    <h5 class="card-title">@item.Nombre</h5>
                    <p class="card-text">
                        <small class="text-muted">Precio: @item.Precio</small><br>
                        <small class="text-muted">Descripción: @item.Descripcion</small><br>
                    </p>
                    <!--<div class="d-flex justify-content-between">
                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-secondary">Ver</a>
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-outline-info">Editar</a>
                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-outline-danger">Eliminar</a>
                    </div>-->
                    <div class="button-container">
                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-secondary">Ver</a>
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-outline-info">Editar</a>
                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-outline-danger">Eliminar</a>
                    </div>

                    <button type="button" class="btn btn-pink mt-2 order-btn"
                            data-id="@item.Id"
                            data-nombre="@item.Nombre"
                            data-precio="@item.Precio">
                        Ordenar
                    </button>
                </div>
            </div>
        </div>
    }
</div>
<form asp-controller="Orden" asp-action="AgregarOrden">
    <div class="sidebar" id="sidebar">
        <h2>Mi Orden</h2>
        <ul id="order-list"></ul>
        <input type="text" id="total" name="total" class="btn btn-primary" readonly /> <!-- Cambié a "readonly" para que no se edite -->
        <button type="submit">Realizar pedido</button>
    </div>
</form>
<!-- Barra lateral para la orden -->


<!-- Botón para mostrar/ocultar la barra lateral de ordenes-->
<button class="open-btn btn-pink" onclick="toggleSidebar()">Mi Orden</button>

<style>

    /* Estilo para centrar los botones */
    .button-container {
        display: flex;
        justify-content: center; /* Centrar horizontalmente */
        gap: 10px; /* Espaciado entre los botones */
        flex-wrap: wrap; /* Permite que los botones se ajusten si el espacio es limitado */
        padding-top: 10px;
    }

    /* Estilo de las cards */
    .dessert-item {
        border: none;
        border-radius: 10px;
        overflow: hidden;
        transition: transform 0.3s, box-shadow 0.3s;
    }

        .dessert-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        }

    #toggle-sidebar {
        position: fixed;
        top: 10px;
        right: 10px;
        z-index: 1000;
        background-color: #007bff;
        color: #fff;
        padding: 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .sidebar {
        width: 280px;
        padding: 20px;
        background-color: #f8f9fa;
        position: fixed;
        right: -280px; /* Asegurarse de que la barra lateral esté completamente oculta */
        top: 0;
        height: 100%;
        box-shadow: -3px 0px 10px rgba(0, 0, 0, 0.1);
        transition: right 0.3s ease-in-out; /* Suaviza la animación */
    }

        .sidebar.active {
            right: 0;
        }

        .sidebar h2 {
            margin-top: 0;
        }

        .sidebar button {
            background-color: #ff69b4;
            color: #fff;
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .sidebar button:hover {
                background-color: #ff1493;
            }

    #order-list {
        list-style-type: none;
        padding: 0;
    }

    .order-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

        .order-item input[type="number"] {
            width: 40px;
        }

    /* Color rosado para botones */
    .btn-pink {
        background-color: #ff69b4;
        color: #fff;
    }

        .btn-pink:hover {
            background-color: #ff1493;
        }

    /* Botón "Eliminar" como "X" */
    .remove-btn {
        background: none;
        border: none;
        font-size: 16px;
        color: #dc3545;
        cursor: pointer;
    }

    /* Ajuste del contenedor de productos cuando la barra lateral está activa */
    .content-shift {
        /* margin-right: 280px;  Asegúrate de que el contenedor también se ajuste cuando la barra lateral esté abierta */
        margin-right:100px;
        transition: margin-right 0.3s ease-in-out;
        flex-wrap: wrap;
        display: flex;
        justify-content:left; /* Alinea las cards al centro */
        gap: 20px; /* Espacio entre las cards */
        padding: 20px;
    }

    /* Botón de abrir barra lateral */
    .open-btn {
        position: fixed;
        right: 20px;
        bottom: 20px;
        padding: 10px 15px;
        border: none;
        border-radius: 50px;
        cursor: pointer;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    /* Desplazamiento dinámico de cards */
    .content {
        transition: margin-right 0.3s ease;
        
    }

    /* Clase para ajustar el margen cuando la barra lateral está abierta */
    .sidebar-open .content {
        margin-right: 280px; /* Ajuste del margen para la vista cuando la barra lateral está activa */
    }
</style>

<script>
    let order = [];

    document.querySelectorAll('.order-btn').forEach(button => {
        button.addEventListener('click', () => {
            const id = button.getAttribute('data-id');
            const nombre = button.getAttribute('data-nombre');
            const precio = parseFloat(button.getAttribute('data-precio'));

            addToOrder(id, nombre, precio);
        });
    });

    function addToOrder(id, nombre, precio) {
        const existingItem = order.find(item => item.id === id);
        if (existingItem) {
            existingItem.quantity += 1;
        } else {
            order.push({ id, nombre, precio, quantity: 1 });
        }
        renderOrder();
    }

    function renderOrder() {
        const orderList = document.getElementById("order-list");
        orderList.innerHTML = "";
        let total = 0;

        order.forEach(item => {
            total += item.precio * item.quantity;

            const listItem = document.createElement("li");
            listItem.classList.add("order-item");

            listItem.innerHTML = `
                    ${item.nombre} - $${item.precio.toFixed(2)}
                    <input type="number" value="${item.quantity}" min="1" onchange="updateQuantity('${item.id}', this.value)">
                    <button onclick="removeFromOrder('${item.id}')">Eliminar</button>
                `;

            orderList.appendChild(listItem);
        });

        document.getElementById("total").value = total.toFixed(2);
    }

    function updateQuantity(id, quantity) {
        const item = order.find(item => item.id === id);
        if (item) {
            item.quantity = parseInt(quantity);
            renderOrder();
        }
    }

    function removeFromOrder(id) {
        order = order.filter(item => item.id !== id);
        renderOrder();
    }

    function finalizeOrder() {
        const total = parseFloat(document.getElementById("total").value);

        const detallesDeOrden = order.map(item => ({
            IdProducto: item.id,
            Cantidad: item.quantity,
            Precio: item.precio
        }));
        console.log(detallesDeOrden);
        alert("Pedido realizado. Total: $" + total);

        fetch('/Orden/AgregarOrden', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            //revisa el console que este bien escrito para y que detalles orden el que este abajo este escrito igual mente escrito como el controlador
            body: JSON.stringify({ total: total, DetallesDeOrden: detallesDeOrden })
        })
            .then(response => {
                if (response.ok) {
                    console.log("Método AgregarOrden activado con los detalles de la orden enviados.");
                } else {
                    onsole.error("Error al procesar la solicitud en el servidor.");
                }
            })
            .catch(error => {
                Console.error("Error en la conexión:", error);
            });

        order = [];
        renderOrder();
    }

    function toggleSidebar() {
        const sidebar = document.getElementById("sidebar");
        const productContainer = document.getElementById("product-container");
        sidebar.classList.toggle("active");
        productContainer.classList.toggle("content-shift");
    }
</script>



